'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var postcss = _interopDefault(require('postcss'));

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

// space-separated values splitter
var space = postcss.list.space;

// overflow shorthand property matcher

var overflowPropertyRegExp = /^overflow$/i;

var index = postcss.plugin('postcss-overflow-shorthand', function (opts) {
	var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;

	return function (root) {
		// for each overflow declaration
		root.walkDecls(overflowPropertyRegExp, function (decl) {
			// split the declaration values
			var _space = space(decl.value),
			    _space2 = _toArray(_space),
			    overflowX = _space2[0],
			    overflowY = _space2[1],
			    invalidatingValues = _space2.slice(2);

			// if there are two values, but no invalidating values


			if (overflowY && !invalidatingValues.length) {
				// insert the overflow-* longhand declarations
				decl.cloneBefore({
					prop: `${decl.prop}-x`,
					value: overflowX
				});

				decl.cloneBefore({
					prop: `${decl.prop}-y`,
					value: overflowY
				});

				// conditionally remove the original declaration
				if (!preserve) {
					decl.remove();
				}
			}
		});
	};
});

module.exports = index;
