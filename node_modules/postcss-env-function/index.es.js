import parser from 'postcss-values-parser';
import postcss from 'postcss';

var dashedMatch = /^--/;

// returns the value of a css function as a string
var getFnValue = (function (node) {
	var value = String(node.nodes.slice(1, -1));

	return dashedMatch.test(value) ? value : undefined;
});

// replaces a node with a word node
function replaceWithWord (node, value) {
	var raws = node.raws;

	node.replaceWith(parser.word({ value, raws }));
}

// update a node with an environment value
function updateEnvValue (node, variables) {
	// get the value of a css function as a string
	var value = getFnValue(node);

	if (typeof value === 'string') {
		replaceWithWord(node, variables[value]);
	}
}

// returns whether a node is a css env() function
var isEnvFunc = (function (node) {
  return node && node.type === 'func' && node.value === 'env';
});

// walks a node recursively and runs a function using its children
function walk(node, fn) {
	node.nodes.slice(0).forEach(function (childNode) {
		if (childNode.nodes) {
			walk(childNode, fn);
		}

		if (isEnvFunc(childNode)) {
			fn(childNode);
		}
	});
}

// returns a value replaced with environment variables
var getReplacedValue = (function (originalValue, variables) {
	// get the ast of the original value
	var ast = parser(originalValue).parse();

	// walk all of the css env() functions
	walk(ast, function (node) {
		// update the environment value for the css env() function
		updateEnvValue(node, variables);
	});

	// return the stringified ast
	return String(ast);
});

// returns whether a node is an at-rule
var isAtrule = (function (node) {
  return node && node.type === 'atrule';
});

// returns whether a node is a declaration
var isDecl = (function (node) {
  return node && node.type === 'decl';
});

// returns a value from an at-rule or declaration
var getSupportedValue = (function (node) {
  return isAtrule(node) && node.params || isDecl(node) && node.value;
});

// assigns a value to an at-rule or declaration
function setSupportedValue (node, value) {
	if (isAtrule(node)) {
		node.params = value;
	}

	if (isDecl(node)) {
		node.value = value;
	}
}

var index = postcss.plugin('postcss-env-fn', function (opts) {
	return function (root) {
		var variables = Object(Object(opts).variables);

		root.walk(function (node) {
			var supportedValue = getSupportedValue(node);

			if (supportedValue) {
				var replacedValue = getReplacedValue(supportedValue, variables);

				if (replacedValue !== supportedValue) {
					setSupportedValue(node, replacedValue);
				}
			}
		});
	};
});

export default index;
